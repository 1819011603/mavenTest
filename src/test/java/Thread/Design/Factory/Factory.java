package Thread.Design.Factory;

// 单一职责原则

/*
    与对象相关的职责：1.对象本身所具有的职责 2.创建对象的职责  3.使用对象的职责

      在Java语言中，我们通常有以下几种创建对象的方式：
       (1) 使用new关键字直接创建对象；
       (2) 通过反射机制创建对象；
       (3) 通过clone()方法创建对象；
       (4) 通过工厂类创建对象。

    工厂类的好处：
        1.单一职责原则（将对象的使用与创建分开） 降耦合  有利于对功能的复用和系统的维护
        2.防止用来实例化一个类的数据和代码在多个类中到处都是，可以将有关创建的代码搬移到一个工厂类
           创建一个对象不仅仅是简单的调用其构造函数，还需要设置一些参数，可能还需要配置环境，如果将这些代码散落在每一个创建对象的客户类中，
           势必会出现代码重复、创建蔓延的问题，而这些客户类其实无须承担对象的创建工作，它们只需使用已创建好的对象就可以了。
           此时，可以引入工厂类来封装对象的创建逻辑和客户代码的实例化/配置选项。
        3.可以提供一系列名字完全不同的工厂方法，每一个工厂方法对应一个构造函数，客户端可以以一种更加可读、易懂的方式来创建对象。
        从一组工厂方法中选择一个意义明确的工厂方法，比从一组名称相同参数不同的构造函数中选择一个构造函数要方便很多。
    缺点：
        如果产品类很简单，而且不存在太多变数，其构造过程也很简单，此时无须为其提供工厂类，直接在使用之前实例化即可，
        例如Java语言中的String类，我们就无须为它专门提供一个StringFactory，这样做反而有点像杀鸡用牛刀，大材小用，
        而且会导致工厂泛滥，增加系统的复杂度。


*/
// 工厂模式
/*
工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。
在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。

优点： 1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 3、屏蔽产品的具体实现，调用者只关心产品的接口。

缺点：每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。
* */

// 给每一个交通工具 生成一个只生产它的工厂  将简单工厂复杂的if-else判断 分成一个个单独生产的工厂
public interface Factory {
    Vehicle getVehicle();

    public static void main(String[] args) {
        Vehicle v = new CarFactory().getVehicle();
        v = new PlaneFactory().getVehicle();
        v = new TrainFactory().getVehicle();
    }
}

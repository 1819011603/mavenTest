package Thread.Design.Factory;

// 简单工厂模式有唯一的工厂类，工厂类的创建方法根据传入的参数做if-else条件判断，决定最终创建什么样的产品对象。 用户不需了解业务代码直接创建
// 一个工厂任务量太重 分几个工厂吧

// 工厂方法模式由多个工厂类实现工厂接口，利用多态来创建不同的产品对象，从而避免了冗长的if-else条件判断。
// 工厂类过多  我们就给他们分个组  再加一层抽象类

// 抽象工厂模式把产品子类进行分组，同组中的不同产品由同一个工厂子类的不同方法负责创建，从而减少了工厂子类的数量。
public class AbstractFactory {
}
